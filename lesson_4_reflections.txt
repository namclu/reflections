1. Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is a clone of another repository but cloned onto GitHub servers. You might want to do this if you don't have permission to edit on a particular (public) project

A clone is a copy of another repository, but copied onto the users local directory instead of GitHub servers. A clone is needed when you want to work on a project on your local machine.

A branch is a split of a repository from the master branch. The purpose of a branch is to be able to work on code without making changes to a stable master branch. From a branch, you can also merge changes back into the master branch.

2. What is the benefit of having a copy of the last known state of the remote stored locally?

Having the last known state of the remote stored locally provides Git with a reference on how to later merge any changes when the user wants to push their changes back into GitHub. It also allows the user to work remotely, and be able to execute commands such as $ git diff, $ git status, git log.

3 How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Collaborating w/o Git or GitHub would be very difficult. It would require the use of shared drives, naming coventions,  logs, communication , etc. to ensure that changes are syncronized, that there are no code conflicts. Basically, there would be lots of manual overhead. Learning Git and GitHub takes a bit of effort, but once you understand and start using it, programming life becomes much easier, especially when collaborating. 

4. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

It's wise to make changes on a separate branch for things such as new features or to try an experiment. That way, if the new code doesn't work out, you can simply delete that branch and there was effect to the master branch. Creating a separate branch is also good when collaborating because it would allow team members to review and comment on changes before it made its way into the master branch.

Where you might want to work directly on the master branch is when something you know will appear in master is being done, such as a bug fix. This way, it's easier to ensure the fix will be propagated through master branch. However, it would still be good to create a separate branchfor bug fixes as you would want to test before pulling the fix into master.
